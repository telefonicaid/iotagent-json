/*
 * Copyright 2015 Telefonica InvestigaciÃ³n y Desarrollo, S.A.U
 *
 * This file is part of iotagent-json
 *
 * iotagent-json is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * iotagent-json is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with iotagent-json.
 * If not, seehttp://www.gnu.org/licenses/.
 *
 * For those usages not covered by the GNU Affero General Public License
 * please contact with::[contacto@tid.es]
 *
 * Modified by: Daniel Calvo - ATOS Research & Innovation
 */

/* eslint-disable array-callback-return */

const iotAgentLib = require('iotagent-node-lib');
const errors = require('./errors');
const config = require('./configService');
const context = {
    op: 'IoTAgentJSON.ThinkingThingsPlugin'
};

function parseBattery(payload) {
    const rawValue = '0,B,' + payload;
    const fields = rawValue.split(',');
    const result = [];

    config.getLogger().debug(context, 'Parsing Battery module: %s', JSON.stringify(fields, null, 4));

    if (fields.length >= 8) {
        result.push({
            name: 'voltage',
            type: 'string',
            value: fields[2]
        });
        result.push({
            name: 'state',
            type: 'string',
            value: fields[3]
        });
        result.push({
            name: 'charger',
            type: 'string',
            value: fields[4]
        });
        result.push({
            name: 'charging',
            type: 'string',
            value: fields[5]
        });
        result.push({
            name: 'mode',
            type: 'string',
            value: fields[6]
        });
        result.push({
            name: 'disconnection',
            type: 'string',
            value: fields[7]
        });
    }

    if (fields.length === 10) {
        result.push({
            name: 'batteryType',
            type: 'string',
            value: fields[8]
        });
        result.push({
            name: 'percentage',
            type: 'string',
            value: fields[9]
        });
    }

    if (result.length !== 0) {
        return result;
    }
    config.getLogger().error(context, 'TTHINGS-001: Too few fields parsing Battery module: %s', rawValue);
    return [];
}

/**
 * Parse GSM string from a P1 Thinking Things module, creating a NGSI attribute for each value passed in the payload.
 *
 * @param {String} payload          The raw payload.
 * @return {Array}                 Collection of the attributes generated by the payload.
 */
function parseGSM(payload) {
    const rawValue = '0,P1,' + payload;
    const fields = rawValue.split(',');
    const result = [];

    config.getLogger().debug(context, 'Parsing GSM module: %s', JSON.stringify(fields, null, 4));

    if (fields.length >= 7) {
        result.push({
            name: 'mcc',
            type: 'string',
            value: fields[2]
        });
        result.push({
            name: 'mnc',
            type: 'string',
            value: fields[3]
        });
        result.push({
            name: 'lac',
            type: 'string',
            value: fields[4]
        });
        result.push({
            name: 'cell-id',
            type: 'string',
            value: fields[5]
        });
        result.push({
            name: 'dbm',
            type: 'string',
            value: fields[6]
        });

        return result;
    }
    config.getLogger().error(context, 'TTHINGS-002: Too few fields parsing GSM module: %s', rawValue);
    return [];
}

/**
 * Parse GSM information from a C1 Thinking Things module, creating a NGSI attribute for each value passed in
 * the payload.
 *
 * @param {String} payload          The raw payload.
 * @return {Array}                  Collection of the attributes generated by the payload.
 */
function parseCell(payload) {
    const rawValue = payload;
    const fields = rawValue.match(/..../g);
    const result = [];

    config.getLogger().debug(context, 'Parsing GSM module: %s', JSON.stringify(fields, null, 4));

    if (fields.length === 4) {
        result.push({
            name: 'mcc',
            type: 'string',
            value: fields[0]
        });
        result.push({
            name: 'mnc',
            type: 'string',
            value: fields[1]
        });
        result.push({
            name: 'lac',
            type: 'string',
            value: fields[2]
        });
        result.push({
            name: 'cell-id',
            type: 'string',
            value: fields[3]
        });

        return result;
    }
    config.getLogger().error(context, 'TTHINGS-003: Too few fields parsing C1 module: %s', rawValue);
    return [];
}

/**
 * Given an attribute, if it is a Thinking Things attribute, it parses the value and replaces the raw format value
 * with the parsed one.
 *
 * @param {Object} attribute            NGSI Attribute object (with name, value and type).
 * @return {Object}                     Modified NGSI attribute with the parsed TT payload if applicable.
 */
function modifyAttributes(attribute) {
    switch (attribute.name) {
        case 'P1':
            attribute.value = parseGSM(attribute.value);
            attribute.type = 'compound';
            break;
        case 'C1':
            attribute.name = 'P1';
            attribute.value = parseCell(attribute.value);
            attribute.type = 'compound';
            break;
        case 'B':
            attribute.value = parseBattery(attribute.value);
            attribute.type = 'compound';
            break;
    }

    return attribute;
}

/**
 * Given an attribute, if it is a Thinking Things attribute, it parses the value and replaces the raw format value
 * with the parsed one.
 * @param {String} attributeName        NGSI Attribute name.
 * @param {Object} attribute            NGSI Attribute object (with name, value and type).
 * @return {Object}                     Modified NGSI attribute with the parsed TT payload if applicable.
 */
function modifyAttributesNgsi2(attributeName, attribute) {
    switch (attributeName) {
        case 'P1':
            attribute.value = parseGSM(attribute.value);
            attribute.type = 'compound';
            break;
        case 'C1':
            attribute.name = 'P1';
            attribute.value = parseCell(attribute.value);
            attribute.type = 'compound';
            break;
        case 'B':
            attribute.value = parseBattery(attribute.value);
            attribute.type = 'compound';
            break;
    }

    return attribute;
}

/**
 * Looks for Thinking Thing modules and parses them, updating the entity with the transformed value.
 * NGSIv2
 *
 * @param {Object} entity           NGSI Entity as it would have been sent before the plugin.
 */
function updatePluginNgsi2(entity, entityType, callback) {
    if (entity) {
        Object.keys(entity).map(function(key) {
            entity[key] = modifyAttributesNgsi2(key, entity[key]);
        });

        callback(null, entity, entityType);
    } else {
        callback(new errors.BadPayload(entity));
    }
}

/**
 * Looks for Thinking Thing modules and parses them, updating the entity with the transformed value.
 * NGSIv1
 *
 * @param {Object} entity           NGSI Entity as it would have been sent before the plugin.
 */
function updatePluginNgsi1(entity, entityType, callback) {
    if (entity.contextElements && entity.contextElements[0] && entity.contextElements[0].attributes) {
        const moduleAttributes = entity.contextElements[0].attributes.map(modifyAttributes);

        entity.contextElements[0].attributes = moduleAttributes;

        callback(null, entity, entityType);
    } else {
        callback(new errors.BadPayload(entity));
    }
}

/**
 * Looks for Thinking Thing modules and parses them, updating the entity with the transformed value.
 *
 * @param {Object} entity           NGSI Entity as it would have been sent before the plugin.
 */
function updatePlugin(entity, entityType, callback) {
    if (iotAgentLib.configModule.isCurrentNgsi()) {
        updatePluginNgsi2(entity, entityType, callback);
    } else {
        updatePluginNgsi1(entity, entityType, callback);
    }
}

exports.updatePlugin = updatePlugin;
