#!/bin/bash
#
# iotaJSON         Start/Stop the JSON IoT Agent
#
# chkconfig: 2345 99 60
# description: JSON IoT Agent for Telefonica's IoT Platform
### BEGIN INIT INFO
# Provides: iotaJSON
# Required-Start: $local_fs $syslog
# Required-Stop: $local_fs $syslog
# Default-Start:  345
# Default-Stop: 90
# Short-Description: run iotajson
# Description: JSON IoT Agent is a bridge between a JSON+MQTT based protocol and the NGSI protocol used internally by
#Telefonica's IoT Platform and FIWARE.
### END INIT INFO

# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of the iotagent-json.
#
# the iotagent-json is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# the iotagent-json is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with the iotagent-json. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

NAME=iotajson
IOTA_USER=""
BASE_DIR=/opt/$NAME
PID_DIR=/var/run/$NAME
LOG_DIR=/var/log/$NAME
EXECUTABLE=$BASE_DIR/bin/iotagent-json

# source function library
. /etc/rc.d/init.d/functions

test -x ${EXECUTABLE} || exit 5

# ================================================================================================
# Handle single instance start operation
do_start()
{
    local INSTANCE=$1
    # PID_DIR & BASE_DIR & IOTA_USER & LOG_PATH could be renamed here ...
    [ -f /etc/sysconfig/${NAME}.${INSTANCE} ] && . /etc/sysconfig/${NAME}.${INSTANCE}
    local PID_FILE=${PID_DIR}/${NAME}_${INSTANCE}.pid
    local LOG_PATH=${LOG_DIR}/${NAME}_${INSTANCE}.log
    local PARAMS=config-${INSTANCE}.js

   # Check if already started and exit if so
    status -p ${PID_FILE} ${EXECUTABLE} && return $?
    
    printf "%-50s" "Starting ${NAME} with ${PARAMS}..."
    if [[ -x ${EXECUTABLE} ]]; then
        su $IOTA_USER -c "cd $BASE_DIR; nohup ${EXECUTABLE} ${PARAMS} &>> $LOG_PATH & echo \$! > $PID_FILE"
        echo "Success"
        return 0
    else
        printf "%s\n" "Fail - missing ${EXECUTABLE} executable"
        return 1
    fi
}

# ================================================================================================
# Handle single instance stop operation
do_stop()
{
    local RETVAL=0
    local INSTANCE=$1
    # PID_DIR could be renamed here ...
    [ -f /etc/sysconfig/${NAME}.${INSTANCE} ] && . /etc/sysconfig/${NAME}.${INSTANCE}
    local PID_FILE=${PID_DIR}/${NAME}_${INSTANCE}.pid

    # Check if already stopped and exit if so
    status -p ${PID_FILE} ${EXECUTABLE} ||  return $?

    printf "%-50s" "Stopping $NAME..."
    if [ -f "${PID_FILE}" ]; then
        kill -9 $(cat ${PID_FILE})
        RETVAL=$?
        rm -f ${PID_FILE}
        printf "%s\n" "$(success)"
        return 3
    else
        printf "%s\n" "$(failure)"
        RETVAL=127
    fi
    return $RETVAL
}

# ================================================================================================
# Handle single instance status operation
do_status()
{
    local INSTANCE=$1
    # PID_DIR could be renamed here ...
    [ -f /etc/sysconfig/${NAME}.${INSTANCE} ] && . /etc/sysconfig/${NAME}.${INSTANCE}
    local PID_FILE=${PID_DIR}/${NAME}_${INSTANCE}.pid
  
    status -p ${PID_FILE} "${EXECUTABLE}"
}

# ================================================================================================
# Handle a single process instance
do_instance() {

    local OPERATION=$1
    local INSTANCE=$2

    case ${OPERATION} in

        'start')
            do_start $INSTANCE
            return $?
            ;;

        'stop')
            do_stop $INSTANCE
            return $?
            ;;

        'restart')
            do_stop  $INSTANCE
            do_start $INSTANCE
            ;;

        'status')
            do_status ${INSTANCE}
            return $?
            ;;
        *)
            echo $"Usage: $NAME {start|stop|restart|status} ${INSTANCE}"
            return 2
            ;;

    esac
    :
}

# ---------
# MAIN CODE
# ---------

OPERATION=$1
INSTANCE=$2

# Find available instances
INSTANCES=$(ls /etc/sysconfig/${NAME}.* | cut -f2 -d.)
RETVAL=0
if [ -n "$INSTANCE" ]; then
    do_instance $OPERATION $INSTANCE
    RETVAL=$?
else
    for inst in ${INSTANCES}
    do
        do_instance $OPERATION $inst
        RETVAL=$((${RETVAL}+$?))
    done
fi
exit $RETVAL
